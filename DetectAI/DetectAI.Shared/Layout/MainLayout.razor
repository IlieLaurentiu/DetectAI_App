@using MudBlazor
@using DetectAI.Shared.Services.Theme
@inherits LayoutComponentBase
@implements IDisposable
@inject IThemeService ThemeSvc
<MudThemeProvider @ref="_mudProvider"
                  Theme="ThemeSvc.Theme"
                  IsDarkMode="_dark" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        <MudSwitch Value="_dark"
                   ValueChanged="@(async (bool value) => await OnDarkModeToggle(value))"
                   Color="Color.Primary"
                   ThumbIcon="@(_dark == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                   Class="mx-2" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
        </MudDrawerHeader>
        @*NavMenu*@
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
@code {
    bool _drawerOpen = true;
    private MudThemeProvider? _mudProvider;
    private bool _dark = false;

    void DrawerToggle() => _drawerOpen = !_drawerOpen;

    protected override async Task OnInitializedAsync()
    {
        _dark = ThemeSvc.IsDarkMode;
        ThemeSvc.Changed += OnThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudProvider is not null)
        {
            await ThemeSvc.InitializeAsync(_mudProvider);
        }
    }

    private void OnThemeChanged()
    {
        _dark = ThemeSvc.IsDarkMode;
        InvokeAsync(StateHasChanged);
    }

    private async Task OnDarkModeToggle(bool value)
    {
        await ThemeSvc.SetDarkModeAsync(value);
    }

    public void Dispose()
    {
        ThemeSvc.Changed -= OnThemeChanged;
    }
}